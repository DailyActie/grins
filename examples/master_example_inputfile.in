# This master example input file is for reference on specifying
# various input parameters to GRINS. The GetPot parsing library
# is used to parse the input files. Documentation about GetPot
# can be found here:
# http://getpot.sourceforge.net/documentation-index.html
# The Doxygen documentation can be found here:
# http://libmesh.github.io/doxygen/classGETPOT__NAMESPACE_1_1GetPot.html
#
# We heavily use GetPots sectioning system, particularly nested
# sections. Discussion of this can be found here:
# http://getpot.sourceforge.net/node13.html
# Below we give examples of different uses for the various sections
# GRINS uses. Note that the section names must be unique. We provide
# multiple example usages of the sections below, but you must only use
# one. E.g. we illustrate the different uses of [Mesh] below, but
# there must only be one instance of the [Mesh] section in the input
# file used.
#
# GRINS uses GetPot's UFO capability so that if there are variables in the
# input file that are unused during your program, GRINS will throw
# an error. This is to reduce the chance of errors in the input
# file specification.
#
# The primary sections are:
#    [Mesh] - all options related to the mesh used in the simulation
#    [Materials] - all material property specifications

# The block below is an example of using basic mesh generation
# utilities in libMesh to construct a mesh. An example of reading
# a mesh from a file is given below. Use only ONE of these sections.
[Mesh]

   # Specify whether you want to use libMesh::SerialMesh
   # or libMesh::ParallelMesh.
   # Optional. Defaults to libMesh::Mesh (which depends on the
   #           libMesh build.
   # Acceptable values: serial, parallel
   class = 'serial'

   # Since we are generating a mesh, all the generation
   # options will be in the Generation subsection.
   [./Generation]

      # Specify the dimension of the mesh to build.
      # Mandatory.
      # Acceptable values: 1, 2, 3
      dimension = '3'

      # Specify the number of elements in the {x,y,z}-direction
      # Mandatory:
      #    dimension = 1: n_elems_x
      #    dimension = 2: n_elems_x, n_elems_y
      #    dimension = 3: n_elems_x, n_elems_y, n_elems_z
      # Acceptable values: postive integer
      n_elems_x = '10'
      n_elems_y = '10'
      n_elems_z = '10'

      # Specify the spatial extents in the {x,y,z}-direction
      # Optional. {x,y,z}_min defaults to 0.0, {x,y,z}_max defaults to 1.0
      # Acceptable values: Real number
      x_min = '0.0'
      x_max = '1.0'

      y_min = '0.0'
      y_max = '1.0'

      z_min = '0.0'
      z_max = '1.0'

      # Specify the geometric element type to use in the mesh
      # Optional:
      #    dimension = 1, defaults to EDGE3
      #    dimension = 2, defaults to TRI6
      #    dimension = 3, defaults to TET10
      # Acceptable values:
      #    See enum libMesh::ElemType at libmesh.github.io/doxygen/index.html
      element_type = 'QUAD4'

[]


# The block below is an example of reading a mesh from a given
# mesh file. An example of generating  a mesh using libMesh's basic
# utilities is given above. Use only ONE of these sections.
[Mesh]

   # Specify whether you want to use libMesh::SerialMesh
   # or libMesh::ParallelMesh.
   # Optional. Defaults to libMesh::Mesh (which depends on the
   #           libMesh build.
   # Acceptable values: serial, parallel
   class = 'serial'

   # Since we are reading a mesh, all read options
   # go in the Read subsection.
   [./Read]

       # Specify filename to be read. This can be a Unix path.
       # libMesh decides which reader to use based on the suffix.
       # Mandatory.
       filename = 'meshfile.exo'

[]

# The block below illustrates two optional sections.
# They can be used together, where redistribution will be done
# before refinement, and can be used in conjunction with mesh
# generation or reading a mesh from a file.
[Mesh]

   # Options related to doing input-based refinement. Adaptive refinement
   # is controlled in the in solver section.
   [./Refinement]

       # Specify the number of uniform refinements to perform
       # Optional. Defaults to 0.
       uniformly_refine = '1'

       # Specify a function of (x,y,z) suitable for libMesh::ParsedFunction.
       # This function should return the number of refinements to be performed
       # as a function of (x,y,z); element centroids are used to evaluate the
       # spatial locations. Value from function will automatically be converted to int.
       # If the value is less than zero, no refinements will be done.
       locally_h_refine = '(9-x)/4.5+(abs(y)<.2)'

   # Options related to input-based mesh redistribution
   [../Redistribution]

       # Specify a function of (x,y,z) suitable for libMesh::ParsedFunction.
       # Nodal (x,y,z) locations will be mapped according to the function given.
       # See libMesh::MeshTools::Modification::redistribute. Note each mapping componenet
       # is in separated by {}. In the example given, the x-components of the node will be
       # mapped by x+x*(x-30)/30, the y-compoenents of the nodes will by scaled by a factor of 2,
       # and z-components remain unchanged.
       function = '{x+x*(x-30)/30}{y*2}{z}'

[]

# The block below illustrates specifying properties for different
# materials to be used by a Physics. Many different materials can be
# specified within the [Materials] section. The name of the material
# is arbitrary and is meant to be referenced by the "material" input
# specifier within each Physics input section. Listed below are the various
# material properties currently understood by various Physics within
# GRINS. Note that if a material property is not used by a Physics,
# it is not needed it will be an unused variable (causing an error at runtime).
[Materials]

  # Arbitrary material name. Here we describe input parameters related
  # to the Cantera thermochemistry library. These are used for reacting
  # flow Physics.
  [./CanteraMaterial]
     [./GasMixture]
        # Notify that we're using Cantera
        thermochemistry_library = 'cantera'

        # Species in this gas mixture
        species = 'N2 N C CN'

        # Path to file containing kinetics data.
        # For Cantera, this may also contain all other thermochemistry data.
        kinetics_data = 'datafile.xml'

        [./Cantera]
           # Specify the mixture to be used. This is the "mixture"
           # given in the kinetics_data file. The user must set this
           # since the Cantera data file may contain more than one mixture.
           gas_mixture = 'air4sp'

   # Arbitrary material name. Here we describe input parameters related
   # to the Antioch thermochemistry library. These are used for reacting
   # flow Physics. Note that units here *must* be SI.
   [../../../AntiochMaterial]
      [./GasMixture]
         # Notify that we're using Antioch
         thermochemistry_library = 'antioch'

         # Species in this gas mixture
         species = 'N2 N C CN'

         # Path to file containing kinetics data.
         kinetics_data = 'datafile.xml'

         # Antioch model specification
         [./Antioch]

           # The type of transport model. Currently accepted values
           # are: constant, mixture_averaged
           transport_model = 'constant'

           # Model used for computing thermodynamic quantities.
           # Currently accepted values are: cea, stat_mech
           # Note: CEA data is internally used to the kinetics
           #       calculation and this option will not effect that.
           thermo_model = 'cea'

           # Model used for computing viscosity.
           # Currently accepted values are:
           #   constant (only valid with transport_model = constant)
           #   blottner (transport_model = mixture_averaged, requires blottner_data)
           #   sutherland (transport_model = mixture_averaged, requires sutherland_data),
           #   kinetics_theory (transport_model = mixture_averaged, requires transport_data, requires
           #                    thermal_conductivity_model and mass_diffusivity_model to  be kinetics_theory)
           #
           # For viscosity_model = 'constant', the viscosity value
           # will be parsed from [Materials/material-name/Viscosity/value]
           viscosity_model = 'constant'

           # Model used for computing thermal conductivity.
           # Currently accepted values are:
           #   constant (only valid with transport_model = constant)
           #   constant_prandtl
           #   eucken (transport_model = mixture_averaged, requires thermo_model = stat_mech)
           #   kinetics_theory (transport_model = mixture_averaged, requires transport_data, requires
           #                    viscosity_model and mass_diffusivity_model to be kinetics_theory)
           #
           # For thermal_conductivity_model = 'constant', the conductivity value
           # will be parsed from [Materials/material-name/ThermalConductivity/value]
           #
           # For thermal_conductivity_model = 'constant_prandtl', the
           # Prandtl number will be parsed from [Materials/material-name/PrandtlNumber/value]
           thermal_conductivity_model = 'constant'

           # Model used for computing mass diffusivity
           # Currently accepted values are:
           #   constant_lewis (transport_model = mixture_averaged, constant)
           #   kinetics_theory (transport_model = mixture_averaged, requires transport_data, requires
           #                    viscosity_model and thermal_conductivity_model to be kinetics_theory)
           #
           # For  mass_diffusivity_model = 'constant_lewis', the lewis number
           # will be parsed from [Materials/material-name/LewisNumber/value]
           mass_diffusivity_model = 'constant_lewis'


           # All of the following are datafiles used by Antioch. For
           # values of 'default' (omission of these input options is
           # equivalent to a value of 'default'), the default file installed with
           # Antioch will be used. You may use your own datafile by
           # setting the value to the fullpath of the datafile you
           # wish to use.
           species_data = 'default'
           vibration_data = 'default'
           electronic_data = 'default'
           cea_data = 'default'
           transport_data = 'default'
           sutherland_data = 'default'
           blottner_data = 'default'

   [../../Viscosity]
      value = '1.0e-5' # Units *must* be SI in this case.

   [../ThermalConductivity]
      value = '0.02' # Units *must* be SI in this case.

   [../LewisNumber]
      value = '1.4'

   # Arbitrary Material name. We list all other possible material
   # properties here. For these generic cases, i.e. non-reacting,
   # there is no limitation on the units used. However, it is up to
   # the user to be self-consistent.
   [../../GenericMaterial]

      [./ThermodynamicPressure]
         value = '101325'

      [../ReferenceTemperature]
         value = '600'

      [../GasConstant]
         value = '287.0'

      [../ThermalConductivity]
         model = 'constant'
         value = '.041801'

      [../Viscosity]
         # Accepted values: constant, spalartallmaras
         #
         # spalartallmaras only valid when used with SpalartAllmaras
         # Physics. Also requires specification of turb_visc_model = 'constant'
         model = 'constant'

         value = '2.95456e-5'

      [../SpecificHeat]
         model = 'constant'
         value = '1004.5'

      [../Density]
         value = '1.0'

      [../MembraneThickness]
         value = '0.05'

      [../CrossSectionalArea]
         value = '0.1'


      [../StressStrainLaw]
         # Here we can specify the stress-strain law for an elastic material.
         #  Currently accepted values are:
         #     incompressible_hyperelasticity
         #     hookes_law
         model = 'incompressible_hyperelasticity'

         # If the stress-strain model is
         # incompressible_hyperelasticity, then the strain_energy
         # option controls what strain energy function is used.
         # Currently accepted values are:
         #   mooney_rivlin
         strain_energy = 'mooney_rivlin'

         # Parameters for the Mooney-Rivlin material
         [./MooneyRivlin]
            C1 = '24'
            C2 = '3.0'

         # Parameters for Hookes law. Used if
         # [Materials/material-name/StressStrainLaw] is set to hookes_law
         [../HookesLaw]
            # Youngs modulus
            E = '10000'

            # Poisson's ratio
            nu = '0.3'
[]


# The block below illustrates specifying options for the solver.
# Solvers are things like linear solver, nonlinear solver, and
# time stepping.
[SolverOptions]

   # Options related for time stepping algorithms
   [./TimeStepping]

      # This is the algorithm for time-stepping. Time stepping
      # is triggered by setting this option, so if it is not
      # set, then an unsteady algorithm will not be selected.
      #
      # Current valid options are:
      #   libmesh_euler_solver
      #   libmesh_euler2_solver
      solver_type = 'libmesh_euler_solver'

      # This sets the time step size. There is no default.
      # If using an unsteady algorithm, this option must be
      # set or an error occurs.
      delta_t = '1.0'

      # This sets the number of time steps to take. There is no default.
      # If using an unsteady algorithm, this option must be
      # set or an error occurs.
      n_timesteps = '10'


      # Set the theta value for the theta methods.
      # This option is only relevant for the following solver_types:
      #    libmesh_euler_solver
      #    libmesh_euler2_solver
      #
      # The value of theta should be between 0.0 and 1.0
      # The default value if not specified is theta = '0.5'
      theta = '1.0'
[]
