//-----------------------------------------------------------------------bl-
//--------------------------------------------------------------------------
//
// GRINS - General Reacting Incompressible Navier-Stokes
//
// Copyright (C) 2014-2015 Paul T. Bauman, Roy H. Stogner
// Copyright (C) 2010-2013 The PECOS Development Team
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the Version 2.1 GNU Lesser General
// Public License as published by the Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc. 51 Franklin Street, Fifth Floor,
// Boston, MA  02110-1301  USA
//
//-----------------------------------------------------------------------el-

// This class
#include "grins/error_estimator_options.h"

// GRINS
#include "grins/common.h"

// libMesh
#include "libmesh/getpot.h"

namespace GRINS
{
  AdaptiveTimeSteppingOptions::AdaptiveTimeSteppingOptions( const GetPot& input )
    : _is_time_adaptive(false),
      _target_tolerance(0.0),
      _upper_tolerance(0.0),
      _max_growth(0.0)
  {
    this->check_dup_input_style(input);

    if( this->is_old_style(input) )
      this->parse_old_style(input);
    else
      this->parse_new_style(input);

    if( _target_tolerance > 0 )
      _is_time_adaptive = true;
  }

  void AdaptiveTimeSteppingOptions::check_dup_input_style( const GetPot& input ) const
  {
    if( input.have_variable("unsteady-solver/target_tolerance") &&
        input.have_section("Strategies/AdaptiveTimeStepping/target_tolerance") )
      libmesh_error_msg("ERROR: Cannot use both old and new style of options for AdaptiveTimeSteppingOptions!");
  }

  bool AdaptiveTimeSteppingOptions::is_old_style( const GetPot& input ) const
  {
    return input.have_variable("unsteady-solver/target_tolerance");
  }

  void AdaptiveTimeSteppingOptions::parse_old_style(const GetPot& input)
  {
    {
      std::string warning = "WARNING: Using [MeshAdaptivity/<options>] is a DEPRECATED\n";
      warning += "         style of input for ErrorEstimator options. Please\n";
      warning += "         update to use the [Strategies/ErrorEstimation/<options> style.\n";
      grins_warning(warning);
    }

    _target_tolerance = input("unsteady-solver/target_tolerance", 0.0 );
    _upper_tolerance = input("unsteady-solver/upper_tolerance", 0.0 );
    _max_growth = input("unsteady-solver/max_growth", 0.0 );
  }

  void AdaptiveTimeSteppingOptions::parse_new_style(const GetPot& input)
  {
    std::string section = "Strategies/AdaptiveTimeStepping";
    this->parse_options(section);
    _target_tolerance = input("unsteady-solver/target_tolerance", 0.0 );
    _upper_tolerance = input("unsteady-solver/upper_tolerance", 0.0 );
    _max_growth = input("unsteady-solver/max_growth", 0.0 );
  }

  void AdaptiveTimeSteppingOptions::parse_new_style(const GetPot& input, const std::string& section)
  {

  }

} // end namespace GRINS
